{
  
    
        "post0": {
            "title": "Introduction to Numpy and Pandas",
            "content": "Introduction to Python Libraries: Numpy and Pandas . This blog explores Numpy Library For Basic Array/Matrix operations and Pandas Library for reading and manipulating different types of files. Prerequisites: Basic Data structures in python like list, tuple, dictionaary and control structures in python . Numpy . NumPy, which stands for Numerical Python, is a library consisting of multidimensional array objects and a collection of routines for processing those arrays. Using NumPy, mathematical and logical operations on arrays can be performed. NumPy provides the foundation data structures and operations for SciPy. Install Numpy package using command pip install numpy or conda install numpy command . Array . The most important object defined in NumPy is an N-dimensional array type called ndarray. It describes the collection of items of the same type. Items in the collection can be accessed using a zero-based index. Every item in an ndarray takes the same size of block in the memory. Each element in ndarray is an object of data-type object (called dtype). Any item extracted from ndarray object (by slicing) is represented by a Python object of one of array scalar types. The following diagram shows a relationship between ndarray, data type object (dtype) and array scalar type. The basic ndarray is created using an array function in NumPy as follows − . Defining Arrays and Basic Array Operations . import numpy as np x=np.array([1,2,3,4])# Define 1D Array print(x) # Print the array . [1 2 3 4] . x1=np.array([[1,2,3],[4,5,6]]) #Define 2D Array print(x1) . [[1 2 3] [4 5 6]] . np.shape(x) # Return the shape of an array. i.e. Number of rows and columns in array . (4,) . np.shape(x1) . (2, 3) . x1.shape # This also gives shape of array . (2, 3) . x1.ndim # ndim gives no. of dimensions of array. x1 is 2 dimensional array . 2 . x.ndim # Check dimension of x . 1 . print(len(x1)) len(x) . 2 . 4 . type(x1) # It gives type of x1 . numpy.ndarray . x1.dtype # Gives data type of elements in x1 . dtype(&#39;int32&#39;) . list1=[1,2,3,4] list2=[2,3,4,5] list3=[3,4,5,6] array1=np.array([list1,list2,list3]) print(array1) print(array1.shape) . [[1 2 3 4] [2 3 4 5] [3 4 5 6]] (3, 4) . # If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. # Default is None, in which case a single value is returned. x3=np.random.random((4,3)) print(x3) . [[0.83139996 0.97840645 0.28350016] [0.63990735 0.82499188 0.98103649] [0.68873466 0.20833985 0.15354768] [0.89703541 0.23580797 0.86506907]] . z=np.zeros((3,3)) print(z) . [[0. 0. 0.] [0. 0. 0.] [0. 0. 0.]] . z1=np.ones((3,3)) print(z1) . [[1. 1. 1.] [1. 1. 1.] [1. 1. 1.]] . len(z1) . 3 . md=np.random.rand(2,3)# Generate matrix of shape 2*3 with matrix elements between 0 and 1 print(md) . [[0.97070558 0.16497442 0.04916694] [0.34241996 0.67914468 0.58664927]] . a=np.arange(1,5,1)# generate sequence of numbers excluding stop value, start, stop, interval print(a) . [1 2 3 4] . a=np.arange(10,50,4) print(a) print(a.dtype) type(a) . [10 14 18 22 26 30 34 38 42 46] int32 . numpy.ndarray . np.arange(3) # if no interval is mentioned, Default interval is one . array([0, 1, 2]) . #Returns num evenly spaced samples, calculated over the interval [start, stop]. #The endpoint of the interval can optionally be excluded. b=np.linspace(10,50,4)# generate sequence of numbers, start, stop,how many numbers print(b) . [10. 23.33333333 36.66666667 50. ] . #Return a new array of given shape and type, filled with fill_value m=np.full((5,5),11) print(m) . [[11 11 11 11 11] [11 11 11 11 11] [11 11 11 11 11] [11 11 11 11 11] [11 11 11 11 11]] . a=np.arange(10,50,4) print(a) print(a.dtype) type(a) . [10 14 18 22 26 30 34 38 42 46] int32 . numpy.ndarray . Array slicing: . Contents of ndarray object can be accessed and modified by indexing or slicing, just like Python&#39;s in-built container objects. As mentioned earlier, items in ndarray object follows zero-based index. Three types of indexing methods are available − field access, basic slicing and advanced indexing. . Basic slicing is an extension of Python&#39;s basic concept of slicing to n dimensions. A Python slice object is constructed by giving start, stop, and step parameters to the built-in slice function. This slice object is passed to the array to extract a part of array. . #If only one parameter is put, a single item corresponding to the index will be returned. #If a : is inserted in front of it, all items from that index onwards will be extracted. #If two parameters (with : between them) is used, items between the two indexes (not including the stop index) #with default step one are sliced. print(a) print(a[2]) # element with index 2 . [10 14 18 22 26 30 34 38 42 46] 18 . print(a[2:5]) # elements from index 2 to 5-1 are printed . [18 22 26] . print(a[2:]) # 2nd element onwards all elements are printed . [18 22 26 30 34 38 42 46] . print(a[:3]) # element from index 0 to 3-1 are printed . [10 14 18] . print(a[2::2])# from index 2, with interval 2 . [18 26 34 42] . print(a[2::3]) # from index 2, with interval 3 . [18 30 42] . print(a[::-1]) # elements from last to first, i.e. reverse order as step is -1 . [46 42 38 34 30 26 22 18 14 10] . print(a[::-2]) # Elements in reverse order with step -2 . [46 38 30 22 14] . print(a[2::-1]) # Elements in reverse order from index 2 to 0 with step -1 . [18 14 10] . print(a[-4::2]) # print elements from 4th last element onwards with step 2 . [34 42] . a = np.array([[1,2,3],[3,4,5],[4,5,6]]) print(a) # slice items starting from index print (&#39;Now we will slice the array from the index a[1:]&#39;) print(a[1:])# Print first row onwards . [[1 2 3] [3 4 5] [4 5 6]] Now we will slice the array from the index a[1:] [[3 4 5] [4 5 6]] . Slicing can also include ellipsis (…) to make a selection tuple of the same length as the dimension of an array. If ellipsis is used at the row position, it will return an ndarray comprising of items in rows. . print(&#39;The items in the second column are:&#39;) print(a[...,1]) print(&#39; n&#39;) # Now we will slice all items from the second row print(&#39;The items in the second row are:&#39;) print(a[1,...]) print(&#39; n&#39;) # What is output of this? Execute and check print(a[1:,...]) # Now we will slice all items from column 1 onwards print(&#39;The items column 1 onwards are:&#39;) print(a[...,1:]) . The items in the second column are: [2 4 5] The items in the second row are: [3 4 5] [[3 4 5] [4 5 6]] The items column 1 onwards are: [[2 3] [4 5] [5 6]] . Array manipulation . Several routines are available in NumPy package for manipulation of elements in ndarray object. Reshape,Joining and broadcasting are covered here . Concatenation refers to joining. This function is used to join two or more arrays of the same shape along a specified axis. . NumPy has in-built support for broadcasting. This function mimics the broadcasting mechanism. It returns an object that encapsulates the result of broadcasting one array against the other. . np.reshape(x1,(3,2)) # Reshapes array to specified dimension . array([[1, 2], [3, 4], [5, 6]]) . x1.reshape(3,-1)#for large arrays, we may not know the dimension of any one of the axis, in such case provide that unknown dimension as -1 . array([[1, 2], [3, 4], [5, 6]]) . np.transpose(a)# interchange rows and columns of array . array([[1, 3, 4], [2, 4, 5], [3, 5, 6]]) . import numpy as np a = np.array([[1,2],[3,4]]) print(&#39;First array:&#39;) print(a) print(&#39; n&#39;) b = np.array([[5,6],[7,8]]) print(&#39;Second array:&#39;) print(b) print(&#39; n&#39;) # both the arrays are of same dimensions print(&#39;Joining the two arrays along axis 0:&#39;) print(np.concatenate((a,b))) print(&#39; n&#39;) print(&#39;Joining the two arrays along axis 1:&#39;) print (np.concatenate((a,b),axis = 1)) . First array: [[1 2] [3 4]] Second array: [[5 6] [7 8]] Joining the two arrays along axis 0: [[1 2] [3 4] [5 6] [7 8]] Joining the two arrays along axis 1: [[1 2 5 6] [3 4 7 8]] . a = np.array([[0.0,0.0,0.0],[10.0,10.0,10.0],[20.0,20.0,20.0],[30.0,30.0,30.0]]) b = np.array([1.0,2.0,3.0]) print(a) print(b) print(a+b) . [[ 0. 0. 0.] [10. 10. 10.] [20. 20. 20.] [30. 30. 30.]] [1. 2. 3.] [[ 1. 2. 3.] [11. 12. 13.] [21. 22. 23.] [31. 32. 33.]] . Arithmatic, Statistical and Linear algebraic functions in Numpy . Arithmatic Operations . print(a+b) print(np.add(a,b)) . [[ 1. 2. 3.] [11. 12. 13.] [21. 22. 23.] [31. 32. 33.]] [[ 1. 2. 3.] [11. 12. 13.] [21. 22. 23.] [31. 32. 33.]] . a=np.array([[1,2],[3,4]]) b=np.array([[2,2],[3,3]]) print(a) print(b) . [[1 2] [3 4]] [[2 2] [3 3]] . print(a-b) print(np.subtract(a,b)) . [[-1 0] [ 0 1]] [[-1 0] [ 0 1]] . print(a*b) print(np.multiply(a,b)) . [[ 2 4] [ 9 12]] [[ 2 4] [ 9 12]] . print(a/b) print(np.divide(a,b)) . [[0.5 1. ] [1. 1.33333333]] [[0.5 1. ] [1. 1.33333333]] . print(a//b) . [[0 1] [1 1]] . print(a)# a is 2x2 matrix # Sum of the array elements (a scalar value if axis is none) or array with sum values along the specified axis. np.sum(a)# sum of elements in matrix . [[1 2] [3 4]] . 10 . np.sum(a,axis=0) . array([4, 6]) . np.sum(a,axis=1) . array([3, 7]) . Statistical Functions in Numpy . NumPy has quite a few useful statistical functions for finding minimum, maximum, mean,median from the given elements in the array. . print(np.min(a)) print(np.max(a)) print(np.mean(a)) print(np.median(a)) print(np.argmin(a)) print(np.argmax(a)) . 1 4 2.5 2.5 0 3 . Algebraic Functions in Numpy . np.matmul(a,b) . array([[ 8, 8], [18, 18]]) . print(a*b)# element wise multiplication . [[ 2 4] [ 9 12]] . #For 2-D vectors, it is the equivalent to matrix multiplication. For 1-D arrays, it is the inner product of the vectors. #For N-dimensional arrays, it is a sum product over the last axis of a and the second-last axis of b print(a.dot(b))# matrix multiplication . [[ 8 8] [18 18]] . # np.reminder . ar1=np.random.rand(3,4) # Generate 3x4 matrix of nubers between 0 and 1 print(ar1) . [[0.85643973 0.1031917 0.55385525 0.97920609] [0.68588271 0.88334514 0.81916291 0.22139077] [0.35481625 0.52037969 0.85144163 0.99203129]] . ar2=np.random.randn(3,4) #Return a sample (or samples) from the “standard normal” distribution. print(ar2) . [[ 0.4806007 -2.15999049 -0.30226734 -0.02449045] [ 0.32552263 0.27830224 -0.9562531 -2.73828117] [-1.37379804 0.50617974 0.68903693 1.60446845]] . #Return random integers from low (inclusive) to high (exclusive). #Return random integers from the “discrete uniform” distribution of the specified dtype in the “half-open” interval [low, high). #If high is None (the default), then results are from [0, low). ar3=np.random.randint(1,10,8).reshape(4,2) print(ar3) . [[6 1] [8 6] [7 7] [1 2]] . # find min element of array print(np.min(ar3)) # Find maximum element of array print(np.max(ar3)) # Find mean of all array elements print(np.mean(ar3)) # Find Median print(np.median(ar3,axis=0)) # index of smallest number in array print(np.argmin(ar3)) # index of smallest number at given axis print(np.argmin(ar3,axis=0)) print(np.argmin(ar3,axis=1)) # index of largest number in array print(np.argmax(ar3)) . 1 8 4.75 [6.5 4. ] 1 [3 0] [1 1 0 0] 2 . #Results are from the “continuous uniform” distribution over the stated interval. ar4=np.random.random_sample(3) print(ar4) . [0.01310365 0.57901306 0.80111693] . print(np.argmax(ar3)) print(np.argmax(ar3,axis=0)) print(np.argmax(ar3,axis=1)) . 2 [1 2] [0 0 0 1] . PANDAS . Pandas is an open-source, BSD-licensed Python library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language. Python with Pandas is used in a wide range of fields including academic and commercial domains including finance, economics, Statistics, analytics, etc. . Series . Series is a one-dimensional labeled array capable of holding any data type (integers, strings, floating point numbers, Python objects, etc.). The axis labels are collectively referred to as the index. The basic method to create a Series is to call: s = pd.Series(data, index=index) Here, data can be many different things: a Python dict, an ndarray, a scalar value (like 5) The passed index is a list of axis labels. Thus, this separates into a few cases depending on what data is. . import os import numpy as np import pandas as pd . s = pd.Series(np.random.randn(5), index=[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]) s . a -0.590900 b 1.195079 c 0.236404 d 0.576171 e 0.580070 dtype: float64 . s.index . Index([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;], dtype=&#39;object&#39;) . #When the data is a dict, and an index is not passed, the Series index will be ordered by the dict’s insertion order d = {&#39;b&#39;: 1, &#39;a&#39;: 0, &#39;c&#39;: 2} pd.Series(d) . b 1 a 0 c 2 dtype: int64 . #The same is true when working with Series in pandas. Series can also be passed into most NumPy methods expecting an ndarray. s+s . a -1.181801 b 2.390159 c 0.472807 d 1.152343 e 1.160141 dtype: float64 . Dataframe . DataFrame is a 2-dimensional labeled data structure with columns of potentially different types. You can think of it like a spreadsheet or SQL table, or a dict of Series objects. It is generally the most commonly used pandas object. Like Series, DataFrame accepts many different kinds of input: . Dict of 1D ndarrays, lists, dicts, or Series, 2-D numpy.ndarray,structured or record ndarray,A Series, another DataFrame. . Along with the data, you can optionally pass index (row labels) and columns (column labels) arguments. If you pass an index and / or columns, you are guaranteeing the index and / or columns of the resulting DataFrame. Thus, a dict of Series plus a specific index will discard all data not matching up to the passed index. . If axis labels are not passed, they will be constructed from the input data based on common sense rules. . d = {&#39;one&#39;: pd.Series([1., 2., 3.], index=[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]),&#39;two&#39;: pd.Series([1., 2., 3., 4.], index=[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;])} pd.DataFrame(d) . one two . a 1.0 | 1.0 | . b 2.0 | 2.0 | . c 3.0 | 3.0 | . d NaN | 4.0 | . data=pd.read_csv(&#39;C:/Users/Swift 3/AppData/Local/Programs/Python/Python38/Iris_data_sample.csv&#39;) . #The default number of elements to display is five, but you may pass a custom number. data.head() . Unnamed: 0 SepalLengthCm SepalWidthCm PetalLengthCm PetalWidthCm Species . 0 1 | 5.1 | 3.5 | 1.4 | 0.2 | Iris-setosa | . 1 2 | 4.9 | NaN | 1.4 | 0.2 | NaN | . 2 3 | 4.7 | 3.2 | 1.3 | 0.2 | Iris-setosa | . 3 4 | ?? | 3.1 | 1.5 | 0.2 | Iris-setosa | . 4 5 | 5 | 3.6 | ### | 0.2 | Iris-setosa | . #index_col=0 will remove default index column # and Makes passed column as index instead of 0, 1, 2, 3…r data=pd.read_csv(&#39;C:/Users/Swift 3/AppData/Local/Programs/Python/Python38/Iris_data_sample.csv&#39;,index_col=0) . data.head() . SepalLengthCm SepalWidthCm PetalLengthCm PetalWidthCm Species . 1 5.1 | 3.5 | 1.4 | 0.2 | Iris-setosa | . 2 4.9 | NaN | 1.4 | 0.2 | NaN | . 3 4.7 | 3.2 | 1.3 | 0.2 | Iris-setosa | . 4 ?? | 3.1 | 1.5 | 0.2 | Iris-setosa | . 5 5 | 3.6 | ### | 0.2 | Iris-setosa | . data.index # to get row labels . Int64Index([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ... 141, 142, 143, 144, 145, 146, 147, 148, 149, 150], dtype=&#39;int64&#39;, length=150) . data.columns # to get column labels . Index([&#39;SepalLengthCm&#39;, &#39;SepalWidthCm&#39;, &#39;PetalLengthCm&#39;, &#39;PetalWidthCm&#39;, &#39;Species&#39;], dtype=&#39;object&#39;) . data.shape# rows n columns in dataframe . (150, 5) . data.size # no of elements in dataframe . 750 . data.ndim # no of dimensions of dataframe . 2 . data.memory_usage()#Return the memory usage of each column in bytes. . Index 1200 SepalLengthCm 1200 SepalWidthCm 1200 PetalLengthCm 1200 PetalWidthCm 1200 Species 1200 dtype: int64 . Indexing and Slicing of DataFrame . data.head(5) . SepalLengthCm SepalWidthCm PetalLengthCm PetalWidthCm Species . 1 5.1 | 3.5 | 1.4 | 0.2 | Iris-setosa | . 2 4.9 | NaN | 1.4 | 0.2 | NaN | . 3 4.7 | 3.2 | 1.3 | 0.2 | Iris-setosa | . 4 ?? | 3.1 | 1.5 | 0.2 | Iris-setosa | . 5 5 | 3.6 | ### | 0.2 | Iris-setosa | . data.tail(4) . SepalLengthCm SepalWidthCm PetalLengthCm PetalWidthCm Species . 147 6.3 | 2.5 | 5 | 1.9 | Iris-virginica | . 148 6.5 | 3.0 | 5.2 | 2.0 | Iris-virginica | . 149 6.2 | 3.4 | 5.4 | 2.3 | Iris-virginica | . 150 5.9 | 3.0 | 5.1 | 1.8 | Iris-virginica | . data.loc[:,&#39;SepalLengthCm&#39;]# to access rows or columns by label . 1 5.1 2 4.9 3 4.7 4 ?? 5 5 ... 146 6.7 147 6.3 148 6.5 149 6.2 150 5.9 Name: SepalLengthCm, Length: 150, dtype: object . data.loc[:,&#39;Species&#39;] . 1 Iris-setosa 2 NaN 3 Iris-setosa 4 Iris-setosa 5 Iris-setosa ... 146 Iris-virginica 147 Iris-virginica 148 Iris-virginica 149 Iris-virginica 150 Iris-virginica Name: Species, Length: 150, dtype: object . data.loc[:,[&#39;SepalLengthCm&#39;,&#39;Species&#39;]]# access multiple columns by label . SepalLengthCm Species . 1 5.1 | Iris-setosa | . 2 4.9 | NaN | . 3 4.7 | Iris-setosa | . 4 ?? | Iris-setosa | . 5 5 | Iris-setosa | . ... ... | ... | . 146 6.7 | Iris-virginica | . 147 6.3 | Iris-virginica | . 148 6.5 | Iris-virginica | . 149 6.2 | Iris-virginica | . 150 5.9 | Iris-virginica | . 150 rows × 2 columns . data.loc[4,:] # access 4th row of dataframe . SepalLengthCm ?? SepalWidthCm 3.1 PetalLengthCm 1.5 PetalWidthCm 0.2 Species Iris-setosa Name: 4, dtype: object . data.loc[[4,7],:] # access 4th and 7th row of dataframe . SepalLengthCm SepalWidthCm PetalLengthCm PetalWidthCm Species . 4 ?? | 3.1 | 1.5 | 0.2 | Iris-setosa | . 7 4.6 | 3.4 | 1.4 | 0.3 | Iris-setosa | . data.iloc[0:4,0:2]# access first 4 rows and first 2 columns using index of rows and columns . SepalLengthCm SepalWidthCm . 1 5.1 | 3.5 | . 2 4.9 | NaN | . 3 4.7 | 3.2 | . 4 ?? | 3.1 | . data.iloc[34:37,:]# dataframename.iloc[start:end,start:end] end value is excluded . SepalLengthCm SepalWidthCm PetalLengthCm PetalWidthCm Species . 35 4.9 | 3.1 | 1.5 | 0.1 | Iris-setosa | . 36 5 | 3.2 | 1.2 | 0.2 | Iris-setosa | . 37 5.5 | 3.5 | 1.3 | 0.2 | Iris-setosa | . iris1=data.copy(deep=&#39;False&#39;)# new variable shares only reference of original object iris2=data.copy(deep=&#39;True&#39;)#new variable creates copy of original object . Data Types . There are two main types of data Numeric and character types. Strings are known as objects in Pandas . data.dtypes # to know the data type of each column . SepalLengthCm object SepalWidthCm float64 PetalLengthCm object PetalWidthCm float64 Species object dtype: object . data.select_dtypes(exclude=[object])# exclude columns with &#39;object&#39; data type . SepalWidthCm PetalWidthCm . 1 3.5 | 0.2 | . 2 NaN | 0.2 | . 3 3.2 | 0.2 | . 4 3.1 | 0.2 | . 5 3.6 | 0.2 | . ... ... | ... | . 146 3.0 | 2.3 | . 147 2.5 | 1.9 | . 148 3.0 | 2.0 | . 149 3.4 | 2.3 | . 150 3.0 | 1.8 | . 150 rows × 2 columns . #This method prints information about a DataFrame including the index dtype and columns, non-null values and memory usage. # Syntax: DataFrame.info(verbose=None, buf=None, max_cols=None, memory_usage=None, null_counts=None) data.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 150 entries, 1 to 150 Data columns (total 5 columns): # Column Non-Null Count Dtype -- -- 0 SepalLengthCm 150 non-null object 1 SepalWidthCm 149 non-null float64 2 PetalLengthCm 149 non-null object 3 PetalWidthCm 150 non-null float64 4 Species 149 non-null object dtypes: float64(2), object(3) memory usage: 12.0+ KB . data[&#39;Species&#39;].unique() . array([&#39;Iris-setosa&#39;, nan, &#39;Iris-versicolor&#39;, &#39;Iris-virginica&#39;], dtype=object) . # DataFrame.value_counts(subset=None, normalize=False, sort=True, ascending=False) data[&#39;Species&#39;].value_counts()# print count . Iris-versicolor 50 Iris-virginica 50 Iris-setosa 49 Name: Species, dtype: int64 . The missing values exist in the form of ‘nan&#39;,&#39;??&#39;,&#39;???&#39; . Python, by default replace blank values with ‘nan&#39; convert &#39;??&#39; and &#39;???&#39; values to NaN . data.isnull().sum() . SepalLengthCm 0 SepalWidthCm 1 PetalLengthCm 1 PetalWidthCm 0 Species 1 dtype: int64 . data[&#39;SepalLengthCm&#39;][0:5]# check the value before using na_values . 1 5.1 2 4.9 3 4.7 4 ?? 5 5 Name: SepalLengthCm, dtype: object . data=pd.read_csv(&#39;C:/Users/Swift 3/AppData/Local/Programs/Python/Python38/Iris_data_sample.csv&#39;,index_col=0,na_values=[&#39;??&#39;,&#39;###&#39;]) . data[&#39;SepalLengthCm&#39;][0:5]# check the value before using na_values . 1 5.1 2 4.9 3 4.7 4 NaN 5 5.0 Name: SepalLengthCm, dtype: float64 . data.info()# observe data type before and after using na_values attribute . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 150 entries, 1 to 150 Data columns (total 5 columns): # Column Non-Null Count Dtype -- -- 0 SepalLengthCm 149 non-null float64 1 SepalWidthCm 149 non-null float64 2 PetalLengthCm 148 non-null float64 3 PetalWidthCm 150 non-null float64 4 Species 149 non-null object dtypes: float64(4), object(1) memory usage: 7.0+ KB . data.isnull().sum()# count no of missing values in each column . SepalLengthCm 1 SepalWidthCm 1 PetalLengthCm 2 PetalWidthCm 0 Species 1 dtype: int64 . # before reading excel file, you need to import xlrd package to read excel files, Install it using &#39;pip install xlrd&#39; command iris_excel=pd.read_excel(&#39;C:/Users/Swift 3/AppData/Local/Programs/Python/Python38/Iris_data_sample.xlsx&#39;) .",
            "url": "https://prachi-natu.github.io/Blog/fastpages/jupyter/2021/05/04/Introduction-to-Numpy-and-Pandas.html",
            "relUrl": "/fastpages/jupyter/2021/05/04/Introduction-to-Numpy-and-Pandas.html",
            "date": " • May 4, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://prachi-natu.github.io/Blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://prachi-natu.github.io/Blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://prachi-natu.github.io/Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://prachi-natu.github.io/Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}